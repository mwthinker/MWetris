syntax = "proto3";

package tp_s2c;

import "shared.proto";

message Connections {
	repeated tp.ClientId client_ids = 1;
}

message GameLooby {
	enum SlotType {
		UNSPECIFIED_SLOT_TYPE = 0;
		REMOTE = 1;
		OPEN_SLOT = 2;
		CLOSED_SLOT = 3;
	}

	message Slot {
		SlotType slot_type = 1;
		string name = 2;
		bool ai = 3;
		tp.PlayerId player_id = 4;
		tp.ClientId client_id = 5;
	}

	repeated Slot slots = 1;
}

message CreateGame {
	message Player {
		tp.PlayerId player_id = 1;
		string name = 2;
		int32 level = 3;
		int32 points = 4;
		bool ai = 5;
		tp.BlockType current = 6;
		tp.BlockType next = 7;
		tp.ClientId client_id = 8;
	}

	repeated Player players = 1;
	int32 width = 2;
	int32 height = 3;
	tp.GameRules game_rules = 4;
}

message GameCommand {
	bool pause = 1;
}

message BoardMove {
	tp.PlayerId player_id = 1;
	tp.Move move = 2;
}

message BoardExternalSquares {
	tp.PlayerId player_id = 1;
	repeated tp.BlockType block_types = 2;
}

message BoardNextBlock {
	tp.PlayerId player_id = 1;
	tp.BlockType next = 2;
}

message GameRestart {
	tp.ClientId client_id = 1;
	tp.BlockType current = 2;
	tp.BlockType next = 3;
}

message RequestGameRestart {
	tp.BlockType current = 2;
	tp.BlockType next = 3;
}

message GameRoomClients {
	message Client {
		tp.ClientId client_id = 1;
		int32 connection_id = 2;
	}

	repeated Client clients = 1;
}

// Received by all clients in a game room and by the client that joins.
// Triggered for a client when join or create a game room.
message GameRoomJoined {
	message Client {
		tp.ClientId client_id = 2;
		int32 connection_id = 3;
	}

	tp.GameRoomId game_room_id = 1;
	tp.ClientId client_id = 2;
	GameRoomClients game_room_clients = 3;
	GameLooby game_looby = 4;
}

// Sent when ever game room settings are changed to all clients in game room.
// Or is sent to the client that joins the game room.
message GameRomeSettings {
	int32 max_player_count = 1;
	tp.GameRules game_rules = 2;
}

// Sent to all clients in a game room when a client leaves.
message LeaveGameRoom {
	tp.GameRoomId game_room_id = 1;
	tp.ClientId client_id = 2;
	GameRoomClients game_room_clients = 3;
}

message FailedToConnect {
}

message ClientDisconnected {
	tp.ClientId client_id = 1;
}

message RemoveClient {
	tp.ClientId client_id = 1;
}

message GameRoomList {
	message GameRoom {
		tp.GameRoomId game_room_id = 1;
		string name = 2;
		int32 max_player_count = 3;
		int32 player_count = 4;
	}

	repeated GameRoom game_rooms = 1;
}

message Wrapper {
	GameLooby game_looby = 1;
	CreateGame create_game = 2;
	Connections connections = 3;
	GameCommand game_command = 4;
	BoardMove board_move = 5;
	BoardExternalSquares board_external_squares = 6;
	BoardNextBlock next_block = 7;
	GameRestart game_restart = 8;
	FailedToConnect failed_to_connect = 9;
	GameRoomJoined game_room_joined = 11;
	RequestGameRestart request_game_restart = 12;
	LeaveGameRoom leave_game_room = 13;
	ClientDisconnected client_disconnected = 14;
	RemoveClient remove_client = 15;
	GameRoomList game_room_list = 16;
}
