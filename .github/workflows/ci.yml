name: CI
on: [push, workflow_dispatch]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            vcpkgCommitId: 'f6a1d122a02877e6217e9ac6a637474a34b0f288'
            preset: 'windows'
          - os: ubuntu-22.04
            vcpkgCommitId: 'f6a1d122a02877e6217e9ac6a637474a34b0f288'
            preset: 'unix'
          - os: macos-12
            vcpkgCommitId: 'f6a1d122a02877e6217e9ac6a637474a34b0f288'
            preset: 'unix'

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Set C++/C compiler on macOS
        shell: bash
        run: echo "CC=gcc-11" >> $GITHUB_ENV; echo "CXX=g++-11" >> $GITHUB_ENV; cat "$GITHUB_ENV"
        if: runner.os == 'macOS'

      - uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: ${{ matrix.vcpkgCommitId }}

      - name: GCC version on Linux
        shell: bash
        run: g++ --version
        if: runner.os == 'Linux'

      - name: Run CMake with manifest mode vcpkg
        shell: bash
        run: cmake --preset=${{ matrix.preset }} -B build -DTetrisEngine_Test=1 -DUSE_WIX_GENERATOR=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_VERBOSE_MAKEFILE=1

      - name: Compile binaries
        shell: bash
        run: cmake --build build --config Release

      - name: Run tests
        shell: bash
        run: ctest --rerun-failed --output-on-failure --test-dir build/TetrisEngine/TetrisEngine_Test/
      
      - name: Display help text for TetrisEngine 
        shell: bash
        run: ./build/TetrisEngine/TetrisEngine --help
        if: runner.os == 'Linux' || runner.os == 'macOS'

      - name: Run TetrisEngine and print every move
        shell: bash
        run: ./build/TetrisEngine/TetrisEngine -p
        if: runner.os == 'Linux' || runner.os == 'macOS'

      - name: Run cpack
        shell: bash
        run: cd build && cpack

      - name: Extract msi output
        shell: bash
        run: echo "msi_output=$(ls -1 build | grep '.msi$')" >> $GITHUB_ENV
        if: runner.os == 'Windows'

      - uses: actions/upload-artifact@v3
        if: runner.os == 'Windows' && env.msi_output != ''
        with:
          name: installer
          path: build/${{ env.msi_output }}
